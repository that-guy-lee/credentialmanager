{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\components\\\\users\\\\User.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // redux hook imported\n\nimport { useDispatch } from 'react-redux'; // bootstrap components imported\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // local components imported\n\nimport Role from './Role';\nimport Permissions from './Permissions'; // redux action setUserActions imported\n\nimport { setUserActions } from '../../../redux/features/usersSlice';\n/**\r\n * User component\r\n * the primary display component for the users data of the dashboard\r\n * @param {*} props id, name, email, roles, permissions, isArrNotEmpty props\r\n * @returns users data in components\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction User(_ref) {\n  _s();\n\n  let {\n    id,\n    name,\n    email,\n    roles,\n    permissions,\n    isArrNotEmpty\n  } = _ref;\n  // dispatch assigned the value of the useDispatch hook\n  const dispatch = useDispatch(); // local state variable\n\n  const [orgUnit, setOrgUnit] = useState('');\n  const [toggleAddOrg, setToggleOrg] = useState(false); // key variable used in some additional key logic assignment\n\n  let key = 0;\n  /**\r\n   * handleSetUser function\r\n   * this function is used to update the user role to user\r\n   * duplicate logic is used in the handleSetManagement & handleSetAdmin,\r\n   * so will be thoroughly explained here and diversion will be explained for the other functions\r\n   * token is retrieved from the localStorage\r\n   * payload variable is declared with two attributes,\r\n   * id (from props)\r\n   * newRoles with user attribute set to true, management set to false, and admin to false\r\n   * a try catch block then wraps the fetch request for error handling\r\n   * the fetch request,\r\n   * headers contains the JWT token and the body contains the payload parsed to JSON\r\n   * response is assigned the result of the request\r\n   * if successful,\r\n   * the user is alerted and the setUserActions is fired\r\n   * if not,\r\n   * the error is caught and the user is alerted\r\n   */\n\n  const handleSetUser = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      id,\n      newRoles: {\n        user: true,\n        management: false,\n        admin: false\n      }\n    };\n\n    try {\n      const response = await fetch('user/edit/roles', {\n        method: 'PUT',\n        headers: {\n          authorization: token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n\n      if (result.status === 'ok') {\n        alert(`${name} role set to user`);\n        dispatch(setUserActions());\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * handleSetManagement\r\n   * sets the users role to management\r\n   * same logic as handleSetUser,\r\n   * however the payload has management as true and user as false\r\n   */\n\n\n  const handleSetManagement = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      id,\n      newRoles: {\n        user: false,\n        management: true,\n        admin: false\n      }\n    };\n\n    try {\n      const response = await fetch('user/edit/roles', {\n        method: 'PUT',\n        headers: {\n          authorization: token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      console.log(result);\n\n      if (result.status === 'ok') {\n        alert(`${name} role set to management`);\n        dispatch(setUserActions());\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * handleSetAdmin\r\n   * sets the users role to admin\r\n   * same logic as the other role handles, however,\r\n   * payload - admin is true and the other attributes is false\r\n   */\n\n\n  const handleSetAdmin = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      id,\n      newRoles: {\n        user: false,\n        management: false,\n        admin: true\n      }\n    };\n\n    try {\n      const response = await fetch('user/edit/roles', {\n        method: 'PUT',\n        headers: {\n          authorization: token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      console.log(result);\n\n      if (result.status === 'ok') {\n        alert(`${name} role set to admin`);\n        dispatch(setUserActions());\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * addOrgUnit function\r\n   * this function adds a organisational unit the users permissions when called\r\n   * token is extracted from the localStorage\r\n   * payload object created with id, orgUnit props as attributes\r\n   * try catch block is wrapped around the fetch request for error handling\r\n   * response is assigned the result of the fetch request,\r\n   * the request has the token in the header,\r\n   * and the body of the request contains the payload,\r\n   * result is assigned the parsed response form json\r\n   * if successful,\r\n   * the user is alerted,\r\n   * the setUserActions action is fired\r\n   * and the setToggleOrg is fired with a payload of false\r\n   * errors are caught and alerted to the user\r\n   */\n\n\n  const addOrgUnit = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      id,\n      orgUnit\n    };\n\n    try {\n      const response = await fetch('user/assign/org-unit', {\n        method: 'PUT',\n        headers: {\n          authorization: token,\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n\n      if (result.status === 'ok') {\n        alert(`${name} given permissions for ${orgUnit}`);\n        dispatch(setUserActions());\n        setToggleOrg(false);\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * handleOrgUnitChange function\r\n   * sets the local state orgUnit value to the event value\r\n   * @param {*} e event\r\n   */\n\n\n  const handleOrgUnitChange = e => {\n    setOrgUnit(e.target.value);\n  };\n  /**\r\n   * Bootstrap components & styling are used for layout\r\n   * custom styling is also used for some layout\r\n   * the id, name, & email props are displayed to the user\r\n   * Three buttons are added to allow the user to change the roles of user\r\n   * all three buttons have onClick events that fire the handleSet(role) functions\r\n   * Below the buttons the roles are displayed\r\n   * Using JSX conditional the isArrNotEmpty prop function is called on the roles array\r\n   * if not empty,\r\n   * a Role component is rendered with props\r\n   * Below the Roles the Permission section continues\r\n   * First,\r\n   * the user is displayed a add organisational unit button,\r\n   * that has an onClick event that toggles a state to display an input field and submit button\r\n   * the input field has an onChange event that updates local state and the button an onClick event\r\n   * that fires a function to submit the new organisational unit.\r\n   * Secondly,\r\n   * JSX conditional logic is used with the ArrIsNotEmpty function that checks the permissions prop array is not empty\r\n   * if not empty, the permission array is iterated over and on each iteration a permissions component is render with props\r\n   * */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"users-container-outer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"user-ui-outer\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"p-1\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"id:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"users-container-title\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-center\",\n          children: \"Roles:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center p-3\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            onClick: handleSetUser,\n            children: \"set User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            onClick: handleSetManagement,\n            children: \"set Management\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            onClick: handleSetAdmin,\n            children: \"set Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"pb-5\",\n        children: [isArrNotEmpty(roles) && /*#__PURE__*/_jsxDEV(Role, {\n          id: id,\n          role: roles.user,\n          roleName: \"user\"\n        }, `${id}${key += 1}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), isArrNotEmpty(roles) && /*#__PURE__*/_jsxDEV(Role, {\n          id: id,\n          role: roles.management,\n          roleName: \"management\"\n        }, `${id}${key += 1}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), isArrNotEmpty(roles) && /*#__PURE__*/_jsxDEV(Role, {\n          id: id,\n          role: roles.admin,\n          roleName: \"admin\"\n        }, `${id}${key += 1}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"users-container-title\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Permissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"add-org-button-container\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-12\",\n          children: toggleAddOrg ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: orgUnit,\n              onChange: handleOrgUnitChange,\n              placeholder: \"news management\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-muted\",\n              children: \"Either one of: news management, software reviews, hardware reviews, opinion publishing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              type: \"button\",\n              onClick: addOrgUnit,\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            onClick: () => setToggleOrg(!toggleAddOrg),\n            children: \"add Organisational Unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), isArrNotEmpty(permissions) && permissions.map(perm => /*#__PURE__*/_jsxDEV(Permissions, {\n        id: id,\n        orgUnit: perm.orgUnit,\n        divisions: perm.divisions,\n        isArrNotEmpty: isArrNotEmpty\n      }, `${id}${key += 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n} // User propType validation\n\n\n_s(User, \"VnHvAWXxPkT1yZGidCswFkMJBkc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = User;\nUser.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  roles: PropTypes.shape({\n    user: PropTypes.bool.isRequired,\n    management: PropTypes.bool.isRequired,\n    admin: PropTypes.bool.isRequired\n  }).isRequired,\n  permissions: PropTypes.array.isRequired,\n  isArrNotEmpty: PropTypes.func.isRequired\n};\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/components/users/User.jsx"],"names":["React","useState","PropTypes","useDispatch","Container","Row","Col","Role","Permissions","setUserActions","User","id","name","email","roles","permissions","isArrNotEmpty","dispatch","orgUnit","setOrgUnit","toggleAddOrg","setToggleOrg","key","handleSetUser","token","localStorage","getItem","payload","newRoles","user","management","admin","response","fetch","method","headers","authorization","body","JSON","stringify","result","json","status","alert","err","message","handleSetManagement","console","log","handleSetAdmin","addOrgUnit","handleOrgUnitChange","e","target","value","map","perm","divisions","propTypes","string","isRequired","shape","bool","array","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// redux hook imported\r\nimport { useDispatch } from 'react-redux';\r\n// bootstrap components imported\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n// local components imported\r\nimport Role from './Role';\r\nimport Permissions from './Permissions';\r\n// redux action setUserActions imported\r\nimport { setUserActions } from '../../../redux/features/usersSlice';\r\n\r\n/**\r\n * User component\r\n * the primary display component for the users data of the dashboard\r\n * @param {*} props id, name, email, roles, permissions, isArrNotEmpty props\r\n * @returns users data in components\r\n */\r\nfunction User({ id, name, email, roles, permissions, isArrNotEmpty }) {\r\n  // dispatch assigned the value of the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  // local state variable\r\n  const [orgUnit, setOrgUnit] = useState('');\r\n  const [toggleAddOrg, setToggleOrg] = useState(false);\r\n  // key variable used in some additional key logic assignment\r\n  let key = 0;\r\n  /**\r\n   * handleSetUser function\r\n   * this function is used to update the user role to user\r\n   * duplicate logic is used in the handleSetManagement & handleSetAdmin,\r\n   * so will be thoroughly explained here and diversion will be explained for the other functions\r\n   * token is retrieved from the localStorage\r\n   * payload variable is declared with two attributes,\r\n   * id (from props)\r\n   * newRoles with user attribute set to true, management set to false, and admin to false\r\n   * a try catch block then wraps the fetch request for error handling\r\n   * the fetch request,\r\n   * headers contains the JWT token and the body contains the payload parsed to JSON\r\n   * response is assigned the result of the request\r\n   * if successful,\r\n   * the user is alerted and the setUserActions is fired\r\n   * if not,\r\n   * the error is caught and the user is alerted\r\n   */\r\n  const handleSetUser = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      id,\r\n      newRoles: {\r\n        user: true,\r\n        management: false,\r\n        admin: false,\r\n      },\r\n    };\r\n    try {\r\n      const response = await fetch('user/edit/roles', {\r\n        method: 'PUT',\r\n        headers: { authorization: token, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await response.json();\r\n      if (result.status === 'ok') {\r\n        alert(`${name} role set to user`);\r\n        dispatch(setUserActions());\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * handleSetManagement\r\n   * sets the users role to management\r\n   * same logic as handleSetUser,\r\n   * however the payload has management as true and user as false\r\n   */\r\n  const handleSetManagement = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      id,\r\n      newRoles: {\r\n        user: false,\r\n        management: true,\r\n        admin: false,\r\n      },\r\n    };\r\n    try {\r\n      const response = await fetch('user/edit/roles', {\r\n        method: 'PUT',\r\n        headers: { authorization: token, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await response.json();\r\n      console.log(result);\r\n      if (result.status === 'ok') {\r\n        alert(`${name} role set to management`);\r\n        dispatch(setUserActions());\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * handleSetAdmin\r\n   * sets the users role to admin\r\n   * same logic as the other role handles, however,\r\n   * payload - admin is true and the other attributes is false\r\n   */\r\n  const handleSetAdmin = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      id,\r\n      newRoles: {\r\n        user: false,\r\n        management: false,\r\n        admin: true,\r\n      },\r\n    };\r\n    try {\r\n      const response = await fetch('user/edit/roles', {\r\n        method: 'PUT',\r\n        headers: { authorization: token, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await response.json();\r\n      console.log(result);\r\n      if (result.status === 'ok') {\r\n        alert(`${name} role set to admin`);\r\n        dispatch(setUserActions());\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * addOrgUnit function\r\n   * this function adds a organisational unit the users permissions when called\r\n   * token is extracted from the localStorage\r\n   * payload object created with id, orgUnit props as attributes\r\n   * try catch block is wrapped around the fetch request for error handling\r\n   * response is assigned the result of the fetch request,\r\n   * the request has the token in the header,\r\n   * and the body of the request contains the payload,\r\n   * result is assigned the parsed response form json\r\n   * if successful,\r\n   * the user is alerted,\r\n   * the setUserActions action is fired\r\n   * and the setToggleOrg is fired with a payload of false\r\n   * errors are caught and alerted to the user\r\n   */\r\n  const addOrgUnit = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      id,\r\n      orgUnit,\r\n    };\r\n    try {\r\n      const response = await fetch('user/assign/org-unit', {\r\n        method: 'PUT',\r\n        headers: { authorization: token, 'Content-type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await response.json();\r\n      if (result.status === 'ok') {\r\n        alert(`${name} given permissions for ${orgUnit}`);\r\n        dispatch(setUserActions());\r\n        setToggleOrg(false);\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * handleOrgUnitChange function\r\n   * sets the local state orgUnit value to the event value\r\n   * @param {*} e event\r\n   */\r\n  const handleOrgUnitChange = (e) => {\r\n    setOrgUnit(e.target.value);\r\n  };\r\n  /**\r\n   * Bootstrap components & styling are used for layout\r\n   * custom styling is also used for some layout\r\n   * the id, name, & email props are displayed to the user\r\n   * Three buttons are added to allow the user to change the roles of user\r\n   * all three buttons have onClick events that fire the handleSet(role) functions\r\n   * Below the buttons the roles are displayed\r\n   * Using JSX conditional the isArrNotEmpty prop function is called on the roles array\r\n   * if not empty,\r\n   * a Role component is rendered with props\r\n   * Below the Roles the Permission section continues\r\n   * First,\r\n   * the user is displayed a add organisational unit button,\r\n   * that has an onClick event that toggles a state to display an input field and submit button\r\n   * the input field has an onChange event that updates local state and the button an onClick event\r\n   * that fires a function to submit the new organisational unit.\r\n   * Secondly,\r\n   * JSX conditional logic is used with the ArrIsNotEmpty function that checks the permissions prop array is not empty\r\n   * if not empty, the permission array is iterated over and on each iteration a permissions component is render with props\r\n   * */\r\n  return (\r\n    <Container fluid className=\"users-container-outer\">\r\n      <Row className=\"user-ui-outer\">\r\n        <Row className=\"p-1\">\r\n          <Col className=\"col-md-4\">\r\n            <h5>id:</h5> <p>{id}</p>\r\n          </Col>\r\n          <Col className=\"col-md-4\">\r\n            <h5>name:</h5> <p>{name}</p>\r\n          </Col>\r\n          <Col className=\"col-md-4\">\r\n            <h5>email:</h5> <p>{email}</p>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"users-container-title\">\r\n          <h4 className=\"text-center\">Roles:</h4>\r\n        </Row>\r\n        <Row className=\"justify-content-center p-3\">\r\n          <Col className=\"col-md-auto\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleSetUser}\r\n            >\r\n              set User\r\n            </button>\r\n          </Col>\r\n          <Col className=\"col-md-auto\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleSetManagement}\r\n            >\r\n              set Management\r\n            </button>\r\n          </Col>\r\n          <Col className=\"col-md-auto\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleSetAdmin}\r\n            >\r\n              set Admin\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"pb-5\">\r\n          {isArrNotEmpty(roles) && (\r\n            <Role\r\n              key={`${id}${(key += 1)}`}\r\n              id={id}\r\n              role={roles.user}\r\n              roleName=\"user\"\r\n            />\r\n          )}\r\n          {isArrNotEmpty(roles) && (\r\n            <Role\r\n              key={`${id}${(key += 1)}`}\r\n              id={id}\r\n              role={roles.management}\r\n              roleName=\"management\"\r\n            />\r\n          )}\r\n          {isArrNotEmpty(roles) && (\r\n            <Role\r\n              key={`${id}${(key += 1)}`}\r\n              id={id}\r\n              role={roles.admin}\r\n              roleName=\"admin\"\r\n            />\r\n          )}\r\n        </Row>\r\n        <Row className=\"users-container-title\">\r\n          <h4>Permissions</h4>\r\n        </Row>\r\n        <Row className=\"add-org-button-container\">\r\n          <Col className=\"col-md-12\">\r\n            {toggleAddOrg ? (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  value={orgUnit}\r\n                  onChange={handleOrgUnitChange}\r\n                  placeholder=\"news management\"\r\n                />\r\n                <p className=\"text-muted\">\r\n                  Either one of: news management, software reviews, hardware\r\n                  reviews, opinion publishing\r\n                </p>\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  type=\"button\"\r\n                  onClick={addOrgUnit}\r\n                >\r\n                  submit\r\n                </button>\r\n              </>\r\n            ) : (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => setToggleOrg(!toggleAddOrg)}\r\n              >\r\n                add Organisational Unit\r\n              </button>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        {isArrNotEmpty(permissions) &&\r\n          permissions.map((perm) => (\r\n            <Permissions\r\n              key={`${id}${(key += 1)}`}\r\n              id={id}\r\n              orgUnit={perm.orgUnit}\r\n              divisions={perm.divisions}\r\n              isArrNotEmpty={isArrNotEmpty}\r\n            />\r\n          ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n// User propType validation\r\nUser.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  roles: PropTypes.shape({\r\n    user: PropTypes.bool.isRequired,\r\n    management: PropTypes.bool.isRequired,\r\n    admin: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n  permissions: PropTypes.array.isRequired,\r\n  isArrNotEmpty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default User;\r\n"]},"metadata":{},"sourceType":"module"}