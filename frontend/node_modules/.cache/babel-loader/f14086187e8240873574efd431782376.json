{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\components\\\\Credential.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // prop type validation\n\nimport PropTypes from 'prop-types'; // redux hooks\n\nimport { useDispatch, useSelector } from 'react-redux'; // react bootstrap components\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // redux actions imported\n\nimport { setActions } from '../../redux/features/orgUnitSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Credential(_ref) {\n  _s();\n\n  let {\n    serviceName,\n    loginName,\n    divisionName,\n    unitName,\n    password\n  } = _ref;\n  // dispatch assigned the value of the useDispatch hook\n  const dispatch = useDispatch(); // local state variables declared for edit functionality\n\n  const [service, setService] = useState(serviceName);\n  const [username, setUsername] = useState(loginName);\n  const [passwordState, setPassword] = useState(password);\n  const [serviceEdit, toggleServiceEdit] = useState(false);\n  const [usernameEdit, toggleUsernameEdit] = useState(false);\n  const [passwordEdit, togglePasswordEdit] = useState(false); // useSelector hook used to sync with redux store state values\n\n  const management = useSelector(state => state.orgData.loggedUser.roles.management);\n  const admin = useSelector(state => state.orgData.loggedUser.roles.admin);\n  const dataStatus = useSelector(state => state.orgData.status);\n  /**\r\n   * handle(input)Change function\r\n   * each handles function fires a local state setFunction\r\n   * that sets the local state to the event value\r\n   */\n\n  const handleServiceChange = e => {\n    setService(e.target.value);\n  };\n\n  const handleUsernameChange = e => {\n    setUsername(e.target.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n  /**\r\n   * handleSubmit function\r\n   * submits the updated service credentials to the database\r\n   * token is retrieved from the localStorage\r\n   * payload object is assigned the props and local state as attributes\r\n   * the fetch request is wrapped in a try catch block for error handling\r\n   * the headers contains the token\r\n   * and the body contains the payload\r\n   * if successful\r\n   * the user is alerted and the setActions action is fired\r\n   */\n\n\n  const handleSubmit = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      orgUnit: unitName,\n      division: divisionName,\n      targetServiceName: serviceName,\n      credentials: {\n        serviceName: service,\n        loginName: username,\n        password: passwordState\n      }\n    };\n    const response = await fetch('/units/edit/credentials', {\n      method: 'PUT',\n      headers: {\n        authorization: `${token}`,\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const result = await response.json();\n\n    if (result.status === 'ok') {\n      alert(`Succesfully updated ${serviceName} `);\n      dispatch(setActions());\n    }\n  };\n  /**\r\n   * editDisplayService function\r\n   * the next display function duplicate logic, so the logic will be explained thoroughly here\r\n   * two conditionals are used to determine firstly if the user is management or an admin\r\n   * secondly to see if the user wants to edit the service\r\n   * if so,\r\n   * an input field and submit button is returned with an onChange event and onClick event\r\n   * if not an edit button\r\n   * if the user is not an admin or management nothing is returned\r\n   * @returns an Edit button or input field and submit button\r\n   */\n\n\n  const editDisplayService = () => {\n    if ((management || admin) && serviceEdit === false) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-warning btn-edit\",\n        onClick: () => toggleServiceEdit(!serviceEdit),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this);\n    }\n\n    if ((management || admin) && serviceEdit) {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: service,\n          onChange: handleServiceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-warning btn-edit\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this);\n    }\n  }; // editDisplayUsername function displays the username edit button or input field and submit button\n\n\n  const editDisplayUsername = () => {\n    if ((management || admin) && usernameEdit === false) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-warning btn-edit\",\n        onClick: () => toggleUsernameEdit(!usernameEdit),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this);\n    }\n\n    if ((management || admin) && usernameEdit) {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: handleUsernameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-warning btn-edit\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this);\n    }\n  }; // editDisplayPassword function displays the password edit button or input field and submit button\n\n\n  const editDisplayPassword = () => {\n    if ((management || admin) && passwordEdit === false) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-warning btn-edit\",\n        onClick: () => togglePasswordEdit(!passwordEdit),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this);\n    }\n\n    if ((management || admin) && passwordEdit) {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: passwordState,\n          onChange: handlePasswordChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-warning btn-edit\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /**\r\n   * bootstrap styling & components are used in conjunction with custom styling for layout\r\n   * each credential data is displayed with props as text value\r\n   * further JSX conditional is used to check if the data has been retrieved and then the display controllers are called\r\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"credentials-container-outer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"credentials-container-inner\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Service: \", serviceName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), dataStatus === 'success' && editDisplayService()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"username: \", loginName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), dataStatus === 'success' && editDisplayUsername()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"password: \", password]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), dataStatus === 'success' && editDisplayPassword()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n} // prop type validation\n\n\n_s(Credential, \"6FvKRW8hLaQHLAxL3GOCi7sB7CA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Credential;\nCredential.propTypes = {\n  serviceName: PropTypes.string.isRequired,\n  loginName: PropTypes.string.isRequired,\n  divisionName: PropTypes.string.isRequired,\n  unitName: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n};\nexport default Credential;\n\nvar _c;\n\n$RefreshReg$(_c, \"Credential\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/components/Credential.jsx"],"names":["React","useState","PropTypes","useDispatch","useSelector","Container","Row","Col","setActions","Credential","serviceName","loginName","divisionName","unitName","password","dispatch","service","setService","username","setUsername","passwordState","setPassword","serviceEdit","toggleServiceEdit","usernameEdit","toggleUsernameEdit","passwordEdit","togglePasswordEdit","management","state","orgData","loggedUser","roles","admin","dataStatus","status","handleServiceChange","e","target","value","handleUsernameChange","handlePasswordChange","handleSubmit","token","localStorage","getItem","payload","orgUnit","division","targetServiceName","credentials","response","fetch","method","headers","authorization","body","JSON","stringify","result","json","alert","editDisplayService","editDisplayUsername","editDisplayPassword","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n// prop type validation\r\nimport PropTypes from 'prop-types';\r\n// redux hooks\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// react bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n// redux actions imported\r\nimport { setActions } from '../../redux/features/orgUnitSlice';\r\n\r\nfunction Credential({\r\n  serviceName,\r\n  loginName,\r\n  divisionName,\r\n  unitName,\r\n  password,\r\n}) {\r\n  // dispatch assigned the value of the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  // local state variables declared for edit functionality\r\n  const [service, setService] = useState(serviceName);\r\n  const [username, setUsername] = useState(loginName);\r\n  const [passwordState, setPassword] = useState(password);\r\n  const [serviceEdit, toggleServiceEdit] = useState(false);\r\n  const [usernameEdit, toggleUsernameEdit] = useState(false);\r\n  const [passwordEdit, togglePasswordEdit] = useState(false);\r\n  // useSelector hook used to sync with redux store state values\r\n  const management = useSelector(\r\n    (state) => state.orgData.loggedUser.roles.management\r\n  );\r\n  const admin = useSelector((state) => state.orgData.loggedUser.roles.admin);\r\n  const dataStatus = useSelector((state) => state.orgData.status);\r\n  /**\r\n   * handle(input)Change function\r\n   * each handles function fires a local state setFunction\r\n   * that sets the local state to the event value\r\n   */\r\n  const handleServiceChange = (e) => {\r\n    setService(e.target.value);\r\n  };\r\n\r\n  const handleUsernameChange = (e) => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n  /**\r\n   * handleSubmit function\r\n   * submits the updated service credentials to the database\r\n   * token is retrieved from the localStorage\r\n   * payload object is assigned the props and local state as attributes\r\n   * the fetch request is wrapped in a try catch block for error handling\r\n   * the headers contains the token\r\n   * and the body contains the payload\r\n   * if successful\r\n   * the user is alerted and the setActions action is fired\r\n   */\r\n  const handleSubmit = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      orgUnit: unitName,\r\n      division: divisionName,\r\n      targetServiceName: serviceName,\r\n      credentials: {\r\n        serviceName: service,\r\n        loginName: username,\r\n        password: passwordState,\r\n      },\r\n    };\r\n    const response = await fetch('/units/edit/credentials', {\r\n      method: 'PUT',\r\n      headers: {\r\n        authorization: `${token}`,\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n    const result = await response.json();\r\n    if (result.status === 'ok') {\r\n      alert(`Succesfully updated ${serviceName} `);\r\n      dispatch(setActions());\r\n    }\r\n  };\r\n  /**\r\n   * editDisplayService function\r\n   * the next display function duplicate logic, so the logic will be explained thoroughly here\r\n   * two conditionals are used to determine firstly if the user is management or an admin\r\n   * secondly to see if the user wants to edit the service\r\n   * if so,\r\n   * an input field and submit button is returned with an onChange event and onClick event\r\n   * if not an edit button\r\n   * if the user is not an admin or management nothing is returned\r\n   * @returns an Edit button or input field and submit button\r\n   */\r\n  const editDisplayService = () => {\r\n    if ((management || admin) && serviceEdit === false) {\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning btn-edit\"\r\n          onClick={() => toggleServiceEdit(!serviceEdit)}\r\n        >\r\n          Edit\r\n        </button>\r\n      );\r\n    }\r\n    if ((management || admin) && serviceEdit) {\r\n      return (\r\n        <Row>\r\n          <input type=\"text\" value={service} onChange={handleServiceChange} />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning btn-edit\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </Row>\r\n      );\r\n    }\r\n  };\r\n  // editDisplayUsername function displays the username edit button or input field and submit button\r\n  const editDisplayUsername = () => {\r\n    if ((management || admin) && usernameEdit === false) {\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning btn-edit\"\r\n          onClick={() => toggleUsernameEdit(!usernameEdit)}\r\n        >\r\n          Edit\r\n        </button>\r\n      );\r\n    }\r\n    if ((management || admin) && usernameEdit) {\r\n      return (\r\n        <Row>\r\n          <input type=\"text\" value={username} onChange={handleUsernameChange} />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning btn-edit\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </Row>\r\n      );\r\n    }\r\n  };\r\n  // editDisplayPassword function displays the password edit button or input field and submit button\r\n  const editDisplayPassword = () => {\r\n    if ((management || admin) && passwordEdit === false) {\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning btn-edit\"\r\n          onClick={() => togglePasswordEdit(!passwordEdit)}\r\n        >\r\n          Edit\r\n        </button>\r\n      );\r\n    }\r\n    if ((management || admin) && passwordEdit) {\r\n      return (\r\n        <Row>\r\n          <input\r\n            type=\"password\"\r\n            value={passwordState}\r\n            onChange={handlePasswordChange}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning btn-edit\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </Row>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * bootstrap styling & components are used in conjunction with custom styling for layout\r\n   * each credential data is displayed with props as text value\r\n   * further JSX conditional is used to check if the data has been retrieved and then the display controllers are called\r\n   */\r\n  return (\r\n    <div className=\"credentials-container-outer\">\r\n      <Row className=\"credentials-container-inner\">\r\n        <Col className=\"col-md-auto\">\r\n          <h5>Service: {serviceName}</h5>\r\n          {dataStatus === 'success' && editDisplayService()}\r\n        </Col>\r\n        <Col className=\"col-md-auto\">\r\n          <h5>username: {loginName}</h5>\r\n          {dataStatus === 'success' && editDisplayUsername()}\r\n        </Col>\r\n        <Col className=\"col-md-auto\">\r\n          <h5>password: {password}</h5>\r\n          {dataStatus === 'success' && editDisplayPassword()}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n// prop type validation\r\nCredential.propTypes = {\r\n  serviceName: PropTypes.string.isRequired,\r\n  loginName: PropTypes.string.isRequired,\r\n  divisionName: PropTypes.string.isRequired,\r\n  unitName: PropTypes.string.isRequired,\r\n  password: PropTypes.string.isRequired,\r\n};\r\nexport default Credential;\r\n"]},"metadata":{},"sourceType":"module"}