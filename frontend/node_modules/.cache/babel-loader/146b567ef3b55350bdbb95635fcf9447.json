{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\components\\\\Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // redux hooks imported\n\nimport { useDispatch, useSelector } from 'react-redux'; // react bootstrap components\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button'; // actions imported from the userSlice & homepageSlice\n\nimport { setDefault, setName, setEmail, setPassword, setPermissions, removePermissions } from '../../redux/features/userSlice';\nimport { toggleComponent } from '../../redux/features/homepageSlice';\n/**\r\n * Register component\r\n * used to register a user to the application\r\n * @returns a register form for the user\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  // dispatch set to the useDispatch hook\n  const dispatch = useDispatch(); // useSelector hook used to sync with redux states (of user input)\n\n  const password = useSelector(state => state.user.password);\n  const userProfile = useSelector(state => state.user); // local state for the confirm password entry\n\n  const [confirmPassword, setConfirmPassword] = useState(''); // local state used for org unit check boxes\n\n  const [newsManage, setNewsManage] = useState(false);\n  const [softwareRev, setSoftwareRev] = useState(false);\n  const [hardwareRev, setHardwareRev] = useState(false);\n  const [opinionPublish, setOpinionPublish] = useState(false);\n  /**\r\n   * handleNameChange function\r\n   * assigns the target value to the nameInput variable\r\n   * uses the dispatch to fire the setName action with the nameInput variable as payload\r\n   * @param {*} e event\r\n   */\n\n  const handleNameChange = e => {\n    const nameInput = e.target.value;\n    dispatch(setName(nameInput));\n  };\n  /**\r\n   * handleEmailChange function\r\n   * assigns the target value to the emailInput variable\r\n   * uses the dispatch to fire the setEmail action with the emailInput variable as payload\r\n   * @param {*} e event\r\n   */\n\n\n  const handleEmailChange = e => {\n    const emailInput = e.target.value;\n    dispatch(setEmail(emailInput));\n  };\n  /**\r\n   * handlePasswordChange function\r\n   * assigns the target value to the passwordInput variable\r\n   * uses the dispatch to fire the setPassword action with the passwordInput variable as payload\r\n   * @param {*} e event\r\n   */\n\n\n  const handlePasswordChange = e => {\n    const passwordInput = e.target.value;\n    dispatch(setPassword(passwordInput));\n  };\n  /**\r\n   * handleConfirmPassChange\r\n   * calls the setConfirmPassword local state function with target value as param\r\n   * @param {*} e event\r\n   */\n\n\n  const handleConfirmPassChange = e => {\n    setConfirmPassword(e.target.value);\n  };\n  /**\r\n   * handleOrgUnitChange function\r\n   * assigns a nested object with the event target value to the orgUnit key as value, to the payload variable.\r\n   * Conditionals are used to distinguish between the four org unit checkbox values & events\r\n   * Each org unit has two conditionals\r\n   * if the local state of the checkbox was true, meaning checked when fired,\r\n   * the user is un-checking the org unit, so dispatch is used to fire the removePermissions action with the target value as payload\r\n   * the local state is then set to false and the function is exited with a return\r\n   * if the local state of the checkbox was false, meaning un un checked when fired,\r\n   * the user is checking the box, so dispatch fires the setPermissions with the payload variable as payload.\r\n   * the local state is then set to true and the function is then exited with a return\r\n   * @param {*} e event\r\n   * @returns exits function\r\n   */\n\n\n  const handleOrgUnitChange = e => {\n    const payload = {\n      orgUnit: e.target.value,\n      divisions: [{\n        division: 'new'\n      }]\n    };\n\n    if (e.target.value === 'news management' && newsManage) {\n      dispatch(removePermissions(e.target.value));\n      setNewsManage(false);\n      return;\n    }\n\n    if (e.target.value === 'news management' && newsManage === false) {\n      dispatch(setPermissions(payload));\n      setNewsManage(true);\n      return;\n    }\n\n    if (e.target.value === 'software reviews' && softwareRev) {\n      dispatch(removePermissions(e.target.value));\n      setSoftwareRev(false);\n      return;\n    }\n\n    if (e.target.value === 'software reviews' && softwareRev === false) {\n      dispatch(setPermissions(payload));\n      setSoftwareRev(true);\n      return;\n    }\n\n    if (e.target.value === 'hardware reviews' && hardwareRev) {\n      dispatch(removePermissions(e.target.value));\n      setHardwareRev(false);\n      return;\n    }\n\n    if (e.target.value === 'hardware reviews' && hardwareRev === false) {\n      dispatch(setPermissions(payload));\n      setHardwareRev(true);\n      return;\n    }\n\n    if (e.target.value === 'opinion publishing' && opinionPublish) {\n      dispatch(removePermissions(e.target.value));\n      setOpinionPublish(false);\n      return;\n    }\n\n    if (e.target.value === 'opinion publishing' && opinionPublish === false) {\n      dispatch(setPermissions(payload));\n      setOpinionPublish(true);\n    }\n  };\n  /**\r\n   * passwordCompare function\r\n   * Checks if the two given passwords match.\r\n   * @param {String} entered the first password entered\r\n   * @param {String} confirmation the second password to compare\r\n   * @returns Boolean indicating if the passwords match or not.\r\n   */\n\n\n  const passwordCompare = (entered, confirmation) => {\n    if (entered === confirmation) {\n      return true;\n    }\n\n    alert('Password mismatch');\n    return false;\n  };\n  /**\r\n   * submitUser function\r\n   * registers the user on the application\r\n   * a fetch post request is wrapped in a try catch block for error handling\r\n   * the result of the request with the user object as body is assigned to the response variable\r\n   * the result variable is assigned the parsed response variable from JSON\r\n   * if successful,\r\n   * the user is alerted of success\r\n   * dispatch is used to set the user state to default and toggle the login component returning the user to the login 'view'\r\n   * if unsuccessful,\r\n   * the user is alerted of the error\r\n   * other errors are caught in the catch block and also alerts the user\r\n   * @param {Object} user the user data as an object.\r\n   */\n\n\n  const submitUser = async user => {\n    try {\n      const response = await fetch('auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n      const result = await response.json();\n\n      if (result.status === 'ok') {\n        alert('Registration successful');\n        dispatch(setDefault());\n        dispatch(toggleComponent());\n      }\n\n      if (result.status === 'error') {\n        alert(result.message);\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * handleSubmit function\r\n   * calls the passwordCompare function on the password state, and the confirmPassword state\r\n   * if matched the submitUser function is called with the userProfile state as its param\r\n   */\n\n\n  const handleSubmit = () => {\n    if (passwordCompare(password, confirmPassword)) {\n      submitUser(userProfile);\n    }\n  };\n  /**\r\n   * JSX display\r\n   * Bootstrap components are used for layout with bootstrap styling\r\n   * some custom CSS classes are added\r\n   * each form control has a handle function which is called when their onChange event is fired\r\n   * checkboxes also have the checked attribute added with the corresponding local state as value\r\n   * the register button has an onClick event that calls the handleSubmit function when fired\r\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"register-container\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center p-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-3 ui-form-outer\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"p-5\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formUserName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Jane\",\n              onChange: handleNameChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Ensure to use your first name.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Enter email\",\n              onChange: handleEmailChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"We will never share your email with anyone else.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"Password\",\n              onChange: handlePasswordChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPasswordConfirm\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"Password\",\n              onChange: handleConfirmPassChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: \"Please select your organisational unit(s)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicCheckbox\",\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              label: \"News Management\",\n              value: \"news management\",\n              checked: newsManage,\n              onChange: handleOrgUnitChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicCheckbox\",\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              label: \"Software Reviews\",\n              value: \"software reviews\",\n              checked: softwareRev,\n              onChange: handleOrgUnitChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicCheckbox\",\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              label: \"Hardware reviews\",\n              value: \"hardware reviews\",\n              checked: hardwareRev,\n              onChange: handleOrgUnitChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicCheckbox\",\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              label: \"Opinion publishing\",\n              value: \"opinion publishing\",\n              checked: opinionPublish,\n              onChange: handleOrgUnitChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"button\",\n            onClick: handleSubmit,\n            children: \"Register profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Register, \"ahUi7kEIUElo+ODA4/BQmbS9dLI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/components/Register.jsx"],"names":["React","useState","useDispatch","useSelector","Container","Row","Col","Form","Button","setDefault","setName","setEmail","setPassword","setPermissions","removePermissions","toggleComponent","Register","dispatch","password","state","user","userProfile","confirmPassword","setConfirmPassword","newsManage","setNewsManage","softwareRev","setSoftwareRev","hardwareRev","setHardwareRev","opinionPublish","setOpinionPublish","handleNameChange","e","nameInput","target","value","handleEmailChange","emailInput","handlePasswordChange","passwordInput","handleConfirmPassChange","handleOrgUnitChange","payload","orgUnit","divisions","division","passwordCompare","entered","confirmation","alert","submitUser","response","fetch","method","headers","body","JSON","stringify","result","json","status","message","err","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n// redux hooks imported\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// react bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n// actions imported from the userSlice & homepageSlice\r\nimport {\r\n  setDefault,\r\n  setName,\r\n  setEmail,\r\n  setPassword,\r\n  setPermissions,\r\n  removePermissions,\r\n} from '../../redux/features/userSlice';\r\nimport { toggleComponent } from '../../redux/features/homepageSlice';\r\n/**\r\n * Register component\r\n * used to register a user to the application\r\n * @returns a register form for the user\r\n */\r\nfunction Register() {\r\n  // dispatch set to the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  // useSelector hook used to sync with redux states (of user input)\r\n  const password = useSelector((state) => state.user.password);\r\n  const userProfile = useSelector((state) => state.user);\r\n  // local state for the confirm password entry\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  // local state used for org unit check boxes\r\n  const [newsManage, setNewsManage] = useState(false);\r\n  const [softwareRev, setSoftwareRev] = useState(false);\r\n  const [hardwareRev, setHardwareRev] = useState(false);\r\n  const [opinionPublish, setOpinionPublish] = useState(false);\r\n  /**\r\n   * handleNameChange function\r\n   * assigns the target value to the nameInput variable\r\n   * uses the dispatch to fire the setName action with the nameInput variable as payload\r\n   * @param {*} e event\r\n   */\r\n  const handleNameChange = (e) => {\r\n    const nameInput = e.target.value;\r\n    dispatch(setName(nameInput));\r\n  };\r\n  /**\r\n   * handleEmailChange function\r\n   * assigns the target value to the emailInput variable\r\n   * uses the dispatch to fire the setEmail action with the emailInput variable as payload\r\n   * @param {*} e event\r\n   */\r\n  const handleEmailChange = (e) => {\r\n    const emailInput = e.target.value;\r\n    dispatch(setEmail(emailInput));\r\n  };\r\n  /**\r\n   * handlePasswordChange function\r\n   * assigns the target value to the passwordInput variable\r\n   * uses the dispatch to fire the setPassword action with the passwordInput variable as payload\r\n   * @param {*} e event\r\n   */\r\n  const handlePasswordChange = (e) => {\r\n    const passwordInput = e.target.value;\r\n    dispatch(setPassword(passwordInput));\r\n  };\r\n  /**\r\n   * handleConfirmPassChange\r\n   * calls the setConfirmPassword local state function with target value as param\r\n   * @param {*} e event\r\n   */\r\n  const handleConfirmPassChange = (e) => {\r\n    setConfirmPassword(e.target.value);\r\n  };\r\n  /**\r\n   * handleOrgUnitChange function\r\n   * assigns a nested object with the event target value to the orgUnit key as value, to the payload variable.\r\n   * Conditionals are used to distinguish between the four org unit checkbox values & events\r\n   * Each org unit has two conditionals\r\n   * if the local state of the checkbox was true, meaning checked when fired,\r\n   * the user is un-checking the org unit, so dispatch is used to fire the removePermissions action with the target value as payload\r\n   * the local state is then set to false and the function is exited with a return\r\n   * if the local state of the checkbox was false, meaning un un checked when fired,\r\n   * the user is checking the box, so dispatch fires the setPermissions with the payload variable as payload.\r\n   * the local state is then set to true and the function is then exited with a return\r\n   * @param {*} e event\r\n   * @returns exits function\r\n   */\r\n  const handleOrgUnitChange = (e) => {\r\n    const payload = {\r\n      orgUnit: e.target.value,\r\n      divisions: [\r\n        {\r\n          division: 'new',\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (e.target.value === 'news management' && newsManage) {\r\n      dispatch(removePermissions(e.target.value));\r\n      setNewsManage(false);\r\n      return;\r\n    }\r\n    if (e.target.value === 'news management' && newsManage === false) {\r\n      dispatch(setPermissions(payload));\r\n      setNewsManage(true);\r\n      return;\r\n    }\r\n    if (e.target.value === 'software reviews' && softwareRev) {\r\n      dispatch(removePermissions(e.target.value));\r\n      setSoftwareRev(false);\r\n      return;\r\n    }\r\n    if (e.target.value === 'software reviews' && softwareRev === false) {\r\n      dispatch(setPermissions(payload));\r\n      setSoftwareRev(true);\r\n      return;\r\n    }\r\n    if (e.target.value === 'hardware reviews' && hardwareRev) {\r\n      dispatch(removePermissions(e.target.value));\r\n      setHardwareRev(false);\r\n      return;\r\n    }\r\n    if (e.target.value === 'hardware reviews' && hardwareRev === false) {\r\n      dispatch(setPermissions(payload));\r\n      setHardwareRev(true);\r\n      return;\r\n    }\r\n    if (e.target.value === 'opinion publishing' && opinionPublish) {\r\n      dispatch(removePermissions(e.target.value));\r\n      setOpinionPublish(false);\r\n      return;\r\n    }\r\n    if (e.target.value === 'opinion publishing' && opinionPublish === false) {\r\n      dispatch(setPermissions(payload));\r\n      setOpinionPublish(true);\r\n    }\r\n  };\r\n  /**\r\n   * passwordCompare function\r\n   * Checks if the two given passwords match.\r\n   * @param {String} entered the first password entered\r\n   * @param {String} confirmation the second password to compare\r\n   * @returns Boolean indicating if the passwords match or not.\r\n   */\r\n  const passwordCompare = (entered, confirmation) => {\r\n    if (entered === confirmation) {\r\n      return true;\r\n    }\r\n    alert('Password mismatch');\r\n    return false;\r\n  };\r\n  /**\r\n   * submitUser function\r\n   * registers the user on the application\r\n   * a fetch post request is wrapped in a try catch block for error handling\r\n   * the result of the request with the user object as body is assigned to the response variable\r\n   * the result variable is assigned the parsed response variable from JSON\r\n   * if successful,\r\n   * the user is alerted of success\r\n   * dispatch is used to set the user state to default and toggle the login component returning the user to the login 'view'\r\n   * if unsuccessful,\r\n   * the user is alerted of the error\r\n   * other errors are caught in the catch block and also alerts the user\r\n   * @param {Object} user the user data as an object.\r\n   */\r\n  const submitUser = async (user) => {\r\n    try {\r\n      const response = await fetch('auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-type': 'application/json' },\r\n        body: JSON.stringify(user),\r\n      });\r\n      const result = await response.json();\r\n      if (result.status === 'ok') {\r\n        alert('Registration successful');\r\n        dispatch(setDefault());\r\n        dispatch(toggleComponent());\r\n      }\r\n      if (result.status === 'error') {\r\n        alert(result.message);\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * handleSubmit function\r\n   * calls the passwordCompare function on the password state, and the confirmPassword state\r\n   * if matched the submitUser function is called with the userProfile state as its param\r\n   */\r\n  const handleSubmit = () => {\r\n    if (passwordCompare(password, confirmPassword)) {\r\n      submitUser(userProfile);\r\n    }\r\n  };\r\n  /**\r\n   * JSX display\r\n   * Bootstrap components are used for layout with bootstrap styling\r\n   * some custom CSS classes are added\r\n   * each form control has a handle function which is called when their onChange event is fired\r\n   * checkboxes also have the checked attribute added with the corresponding local state as value\r\n   * the register button has an onClick event that calls the handleSubmit function when fired\r\n   */\r\n  return (\r\n    <Container fluid className=\"register-container\">\r\n      <Row className=\"justify-content-center p-5\">\r\n        <Col className=\"col-md-3 ui-form-outer\">\r\n          <Form className=\"p-5\">\r\n            <Form.Group className=\"mb-3\" controlId=\"formUserName\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Jane\"\r\n                onChange={handleNameChange}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Ensure to use your first name.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                onChange={handleEmailChange}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We will never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={handlePasswordChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPasswordConfirm\">\r\n              <Form.Label> Confirm Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={handleConfirmPassChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Text className=\"text-muted\">\r\n              Please select your organisational unit(s)\r\n            </Form.Text>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"News Management\"\r\n                value=\"news management\"\r\n                checked={newsManage}\r\n                onChange={handleOrgUnitChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Software Reviews\"\r\n                value=\"software reviews\"\r\n                checked={softwareRev}\r\n                onChange={handleOrgUnitChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Hardware reviews\"\r\n                value=\"hardware reviews\"\r\n                checked={hardwareRev}\r\n                onChange={handleOrgUnitChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Opinion publishing\"\r\n                value=\"opinion publishing\"\r\n                checked={opinionPublish}\r\n                onChange={handleOrgUnitChange}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"button\" onClick={handleSubmit}>\r\n              Register profile\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}