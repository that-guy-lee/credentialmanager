{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // default initial state declared\n\nconst initialState = {\n  data: null,\n  status: '',\n  error: null,\n  userActions: 0\n};\n/**\r\n * getUsers AsyncThunk\r\n * retrieves all the users from the server\r\n * token retrieved from localStorage\r\n * request wrapped in try catch block for error handling\r\n * on success result is parsed and returned\r\n * if not err is returned\r\n */\n\nexport const getUsers = createAsyncThunk('users/getUsers', async () => {\n  const token = localStorage.getItem('token');\n\n  try {\n    const response = await fetch('user/all', {\n      method: 'GET',\n      headers: {\n        authorization: `${token}`\n      }\n    });\n    const result = response.json();\n    return result;\n  } catch (err) {\n    return err;\n  }\n});\n/**\r\n * usersSlice\r\n * state named users\r\n * default state is used\r\n * reducer,\r\n * setUserActions declared increments the userActions state when called.\r\n * .pending, .rejected . fulfilled reducers for the getUsers actions declared\r\n * depending on the state of the promise from the AsyncThunk\r\n * state is manipulated.\r\n */\n\nexport const usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    setUserActions: state => {\n      state.userActions += 1;\n    }\n  },\n  extraReducers: {\n    [getUsers.pending]: state => {\n      state.status = 'loading';\n    },\n    [getUsers.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.data = action.payload;\n    },\n    [getUsers.rejected]: (state, action) => {\n      state.status = 'rejected';\n      state.error = action.payload;\n    }\n  }\n}); // setUserActions is exported\n\nexport const {\n  setUserActions\n} = usersSlice.actions; // reducer exported\n\nexport default usersSlice.reducer;","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/redux/features/usersSlice.js"],"names":["createSlice","createAsyncThunk","initialState","data","status","error","userActions","getUsers","token","localStorage","getItem","response","fetch","method","headers","authorization","result","json","err","usersSlice","name","reducers","setUserActions","state","extraReducers","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C,C,CACA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,WAAW,EAAE;AAJM,CAArB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGN,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACrE,QAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAD,EAAa;AACvCC,MAAAA,MAAM,EAAE,KAD+B;AAEvCC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,GAAEP,KAAM;AAA1B;AAF8B,KAAb,CAA5B;AAIA,UAAMQ,MAAM,GAAGL,QAAQ,CAACM,IAAT,EAAf;AACA,WAAOD,MAAP;AACD,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,WAAOA,GAAP;AACD;AACF,CAZuC,CAAjC;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGnB,WAAW,CAAC;AACpCoB,EAAAA,IAAI,EAAE,OAD8B;AAEpClB,EAAAA,YAFoC;AAGpCmB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAGC,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACjB,WAAN,IAAqB,CAArB;AACD;AAHO,GAH0B;AAQpCkB,EAAAA,aAAa,EAAE;AACb,KAACjB,QAAQ,CAACkB,OAAV,GAAqBF,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACnB,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACG,QAAQ,CAACmB,SAAV,GAAsB,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACvCJ,MAAAA,KAAK,CAACnB,MAAN,GAAe,SAAf;AACAmB,MAAAA,KAAK,CAACpB,IAAN,GAAawB,MAAM,CAACC,OAApB;AACD,KAPY;AAQb,KAACrB,QAAQ,CAACsB,QAAV,GAAqB,CAACN,KAAD,EAAQI,MAAR,KAAmB;AACtCJ,MAAAA,KAAK,CAACnB,MAAN,GAAe,UAAf;AACAmB,MAAAA,KAAK,CAAClB,KAAN,GAAcsB,MAAM,CAACC,OAArB;AACD;AAXY;AARqB,CAAD,CAA9B,C,CAsBP;;AACA,OAAO,MAAM;AAAEN,EAAAA;AAAF,IAAqBH,UAAU,CAACW,OAAtC,C,CACP;;AACA,eAAeX,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// default initial state declared\r\nconst initialState = {\r\n  data: null,\r\n  status: '',\r\n  error: null,\r\n  userActions: 0,\r\n};\r\n/**\r\n * getUsers AsyncThunk\r\n * retrieves all the users from the server\r\n * token retrieved from localStorage\r\n * request wrapped in try catch block for error handling\r\n * on success result is parsed and returned\r\n * if not err is returned\r\n */\r\nexport const getUsers = createAsyncThunk('users/getUsers', async () => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    const response = await fetch('user/all', {\r\n      method: 'GET',\r\n      headers: { authorization: `${token}` },\r\n    });\r\n    const result = response.json();\r\n    return result;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n});\r\n/**\r\n * usersSlice\r\n * state named users\r\n * default state is used\r\n * reducer,\r\n * setUserActions declared increments the userActions state when called.\r\n * .pending, .rejected . fulfilled reducers for the getUsers actions declared\r\n * depending on the state of the promise from the AsyncThunk\r\n * state is manipulated.\r\n */\r\nexport const usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    setUserActions: (state) => {\r\n      state.userActions += 1;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getUsers.pending]: (state) => {\r\n      state.status = 'loading';\r\n    },\r\n    [getUsers.fulfilled]: (state, action) => {\r\n      state.status = 'success';\r\n      state.data = action.payload;\r\n    },\r\n    [getUsers.rejected]: (state, action) => {\r\n      state.status = 'rejected';\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n// setUserActions is exported\r\nexport const { setUserActions } = usersSlice.actions;\r\n// reducer exported\r\nexport default usersSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}