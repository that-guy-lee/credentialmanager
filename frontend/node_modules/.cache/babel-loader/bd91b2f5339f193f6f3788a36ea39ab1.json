{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // default initial state declared\n\nconst initialState = {\n  orgUnits: null,\n  status: '',\n  error: null,\n  loggedUser: null,\n  actions: 0\n};\n/**\r\n * AsyncThunk getOrgData declared\r\n * retrieves token from local storage\r\n * try catch block wraps the fetch request with token header\r\n * on success the response is parsed from json and assigned to result and returned\r\n * if failure,\r\n * the error is caught and returned\r\n */\n\nexport const getOrgData = createAsyncThunk('orgData/getOrgData', async () => {\n  const token = localStorage.getItem('token');\n\n  try {\n    const response = await fetch('units/divisions', {\n      method: 'GET',\n      headers: {\n        authorization: `${token}`\n      }\n    });\n    const result = response.json();\n    return result;\n  } catch (err) {\n    return err;\n  }\n});\n/**\r\n * orgDataSlice,\r\n * state is named as orgData\r\n * reducers:\r\n * setDefault is used to return the state to default\r\n * setLoggedUser sets the loggedUser state to the action payload\r\n * setActions increments the actions state\r\n * extraReducers builder,\r\n * handles the differing state of the promise from the getOrgData async thunk\r\n * whilst pending,\r\n * status is assigned to loading\r\n * if fulfilled,\r\n * status set to success\r\n * api data is set tom the orgUnits state\r\n * if rejected,\r\n * status is set to rejected,\r\n * error is set to the error returned from the getOrgData\r\n */\n\nexport const orgDataSlice = createSlice({\n  name: 'orgData',\n  initialState,\n  reducers: {\n    setDefault: () => initialState,\n    setLoggedUser: (state, action) => {\n      state.loggedUser = action.payload;\n    },\n    setActions: state => {\n      state.actions += 1;\n    }\n  },\n  extraReducers: {\n    [getOrgData.pending]: state => {\n      state.status = 'loading';\n    },\n    [getOrgData.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.orgUnits = action.payload;\n    },\n    [getOrgData.rejected]: (state, action) => {\n      state.status = 'rejected';\n      state.error = action.payload;\n    }\n  }\n}); // slice actions exported\n\nexport const {\n  setDefault,\n  setLoggedUser,\n  setActions\n} = orgDataSlice.actions; // slice reducer is exported\n\nexport default orgDataSlice.reducer;","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/redux/features/orgUnitSlice.js"],"names":["createSlice","createAsyncThunk","initialState","orgUnits","status","error","loggedUser","actions","getOrgData","token","localStorage","getItem","response","fetch","method","headers","authorization","result","json","err","orgDataSlice","name","reducers","setDefault","setLoggedUser","state","action","payload","setActions","extraReducers","pending","fulfilled","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C,C,CACA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,UAAU,EAAE,IAJO;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CAAC,oBAAD,EAAuB,YAAY;AAC3E,QAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,EAAoB;AAC9CC,MAAAA,MAAM,EAAE,KADsC;AAE9CC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,GAAEP,KAAM;AAA1B;AAFqC,KAApB,CAA5B;AAIA,UAAMQ,MAAM,GAAGL,QAAQ,CAACM,IAAT,EAAf;AACA,WAAOD,MAAP;AACD,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,WAAOA,GAAP;AACD;AACF,CAZyC,CAAnC;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAGpB,WAAW,CAAC;AACtCqB,EAAAA,IAAI,EAAE,SADgC;AAEtCnB,EAAAA,YAFsC;AAGtCoB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,MAAMrB,YADV;AAERsB,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACnB,UAAN,GAAmBoB,MAAM,CAACC,OAA1B;AACD,KAJO;AAKRC,IAAAA,UAAU,EAAGH,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAAClB,OAAN,IAAiB,CAAjB;AACD;AAPO,GAH4B;AAYtCsB,EAAAA,aAAa,EAAE;AACb,KAACrB,UAAU,CAACsB,OAAZ,GAAuBL,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACrB,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACI,UAAU,CAACuB,SAAZ,GAAwB,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACrB,MAAN,GAAe,SAAf;AACAqB,MAAAA,KAAK,CAACtB,QAAN,GAAiBuB,MAAM,CAACC,OAAxB;AACD,KAPY;AAQb,KAACnB,UAAU,CAACwB,QAAZ,GAAuB,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACrB,MAAN,GAAe,UAAf;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACD;AAXY;AAZuB,CAAD,CAAhC,C,CA0BP;;AACA,OAAO,MAAM;AAAEJ,EAAAA,UAAF;AAAcC,EAAAA,aAAd;AAA6BI,EAAAA;AAA7B,IAA4CR,YAAY,CAACb,OAA/D,C,CACP;;AACA,eAAea,YAAY,CAACa,OAA5B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// default initial state declared\r\nconst initialState = {\r\n  orgUnits: null,\r\n  status: '',\r\n  error: null,\r\n  loggedUser: null,\r\n  actions: 0,\r\n};\r\n/**\r\n * AsyncThunk getOrgData declared\r\n * retrieves token from local storage\r\n * try catch block wraps the fetch request with token header\r\n * on success the response is parsed from json and assigned to result and returned\r\n * if failure,\r\n * the error is caught and returned\r\n */\r\nexport const getOrgData = createAsyncThunk('orgData/getOrgData', async () => {\r\n  const token = localStorage.getItem('token');\r\n  try {\r\n    const response = await fetch('units/divisions', {\r\n      method: 'GET',\r\n      headers: { authorization: `${token}` },\r\n    });\r\n    const result = response.json();\r\n    return result;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n});\r\n/**\r\n * orgDataSlice,\r\n * state is named as orgData\r\n * reducers:\r\n * setDefault is used to return the state to default\r\n * setLoggedUser sets the loggedUser state to the action payload\r\n * setActions increments the actions state\r\n * extraReducers builder,\r\n * handles the differing state of the promise from the getOrgData async thunk\r\n * whilst pending,\r\n * status is assigned to loading\r\n * if fulfilled,\r\n * status set to success\r\n * api data is set tom the orgUnits state\r\n * if rejected,\r\n * status is set to rejected,\r\n * error is set to the error returned from the getOrgData\r\n */\r\nexport const orgDataSlice = createSlice({\r\n  name: 'orgData',\r\n  initialState,\r\n  reducers: {\r\n    setDefault: () => initialState,\r\n    setLoggedUser: (state, action) => {\r\n      state.loggedUser = action.payload;\r\n    },\r\n    setActions: (state) => {\r\n      state.actions += 1;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getOrgData.pending]: (state) => {\r\n      state.status = 'loading';\r\n    },\r\n    [getOrgData.fulfilled]: (state, action) => {\r\n      state.status = 'success';\r\n      state.orgUnits = action.payload;\r\n    },\r\n    [getOrgData.rejected]: (state, action) => {\r\n      state.status = 'rejected';\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n// slice actions exported\r\nexport const { setDefault, setLoggedUser, setActions } = orgDataSlice.actions;\r\n// slice reducer is exported\r\nexport default orgDataSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}