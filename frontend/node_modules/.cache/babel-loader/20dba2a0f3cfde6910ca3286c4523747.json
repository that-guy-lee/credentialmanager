{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\components\\\\users\\\\Users.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react'; // redux hooks\n\nimport { useSelector, useDispatch } from 'react-redux'; // bootstrap components\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner'; // local components\n\nimport User from './User'; // redux actions\n\nimport { getUsers } from '../../../redux/features/usersSlice';\n/**\r\n * Users component\r\n * primarily serves as the root injection of users data,\r\n * but also has conditional rendering depending on state\r\n * @returns users data\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Users() {\n  _s();\n\n  // dispatch assigned the value of the useDispatch hook\n  const dispatch = useDispatch(); // useSelector hook used to sync with conditional state\n\n  const usersActions = useSelector(state => state.users.userActions);\n  const usersDataStatus = useSelector(state => state.users.status);\n  const usersDataError = useSelector(state => state.users.error);\n  const usersData = useSelector(state => state.users.data);\n  /**\r\n   * isArrNotEmpty\r\n   * checks if an array is empty or not\r\n   * @param {Array} arr an array\r\n   * @returns {Boolean}\r\n   */\n\n  const isArrNotEmpty = arr => {\n    if (arr.length === 0) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * useEffect hook used to fetch users data on first render,\r\n   * usersActions dependency, will also fetch data if usersActions state changes\r\n   */\n\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, [usersActions]);\n  /**\r\n   * displayUsers Controller\r\n   * first conditional checks if the data is still being fetched\r\n   * if so, displays a spinner to the user\r\n   * second conditional checks if the data fetched failed,\r\n   * if so, displays a heading with an error\r\n   * third conditional checks if the data has been successfully fetch,\r\n   * if so, assigns the usersData to the userDataArr\r\n   * the isArrNotEmpty is used to check that data was received,\r\n   * if so,\r\n   * the array is map over and on each iteration a user component is rendered with users Data as props\r\n   * @param {String} status the state of the data fetch\r\n   * @returns three different displays depending on the data status (spinner, error message heading or User components)\r\n   */\n\n  const displayUsers = status => {\n    if (status === 'pending' || status === '' || status === undefined) {\n      return /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (status === 'rejected') {\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\" \", `${usersDataError}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (status === 'success') {\n      const userDataArr = usersData.data;\n      return /*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-12\",\n        children: isArrNotEmpty(userDataArr) && userDataArr.map(userData => /*#__PURE__*/_jsxDEV(User, {\n          id: userData._id,\n          name: userData.name,\n          email: userData.email,\n          roles: userData.roles,\n          permissions: userData.permissions,\n          isArrNotEmpty: isArrNotEmpty\n        }, userData._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  };\n  /**\r\n   * Users component primary return\r\n   * Bootstrap components & styles are used for layout\r\n   * JSX is used to call the displayUsers function with usersDataStatus as param\r\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"pt-5\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center align-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center align-content-center pt-5\",\n      children: displayUsers(usersDataStatus)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Users, \"36t2doj2TcY8pmbcvU4apGsswHs=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/components/users/Users.jsx"],"names":["React","useEffect","useSelector","useDispatch","Container","Row","Col","Spinner","User","getUsers","Users","dispatch","usersActions","state","users","userActions","usersDataStatus","status","usersDataError","error","usersData","data","isArrNotEmpty","arr","length","displayUsers","undefined","userDataArr","map","userData","_id","name","email","roles","permissions"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\n// redux hooks\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n// local components\r\nimport User from './User';\r\n// redux actions\r\nimport { getUsers } from '../../../redux/features/usersSlice';\r\n/**\r\n * Users component\r\n * primarily serves as the root injection of users data,\r\n * but also has conditional rendering depending on state\r\n * @returns users data\r\n */\r\nfunction Users() {\r\n  // dispatch assigned the value of the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  // useSelector hook used to sync with conditional state\r\n  const usersActions = useSelector((state) => state.users.userActions);\r\n  const usersDataStatus = useSelector((state) => state.users.status);\r\n  const usersDataError = useSelector((state) => state.users.error);\r\n  const usersData = useSelector((state) => state.users.data);\r\n  /**\r\n   * isArrNotEmpty\r\n   * checks if an array is empty or not\r\n   * @param {Array} arr an array\r\n   * @returns {Boolean}\r\n   */\r\n  const isArrNotEmpty = (arr) => {\r\n    if (arr.length === 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * useEffect hook used to fetch users data on first render,\r\n   * usersActions dependency, will also fetch data if usersActions state changes\r\n   */\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, [usersActions]);\r\n  /**\r\n   * displayUsers Controller\r\n   * first conditional checks if the data is still being fetched\r\n   * if so, displays a spinner to the user\r\n   * second conditional checks if the data fetched failed,\r\n   * if so, displays a heading with an error\r\n   * third conditional checks if the data has been successfully fetch,\r\n   * if so, assigns the usersData to the userDataArr\r\n   * the isArrNotEmpty is used to check that data was received,\r\n   * if so,\r\n   * the array is map over and on each iteration a user component is rendered with users Data as props\r\n   * @param {String} status the state of the data fetch\r\n   * @returns three different displays depending on the data status (spinner, error message heading or User components)\r\n   */\r\n  const displayUsers = (status) => {\r\n    if (status === 'pending' || status === '' || status === undefined) {\r\n      return (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      );\r\n    }\r\n    if (status === 'rejected') {\r\n      return <h4> {`${usersDataError}`}</h4>;\r\n    }\r\n    if (status === 'success') {\r\n      const userDataArr = usersData.data;\r\n      return (\r\n        <Col className=\"col-md-12\">\r\n          {isArrNotEmpty(userDataArr) &&\r\n            userDataArr.map((userData) => (\r\n              <User\r\n                id={userData._id}\r\n                key={userData._id}\r\n                name={userData.name}\r\n                email={userData.email}\r\n                roles={userData.roles}\r\n                permissions={userData.permissions}\r\n                isArrNotEmpty={isArrNotEmpty}\r\n              />\r\n            ))}\r\n        </Col>\r\n      );\r\n    }\r\n    return (\r\n      <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  };\r\n  /**\r\n   * Users component primary return\r\n   * Bootstrap components & styles are used for layout\r\n   * JSX is used to call the displayUsers function with usersDataStatus as param\r\n   */\r\n  return (\r\n    <Container fluid className=\"pt-5\">\r\n      <Row className=\"justify-content-center align-content-center\">\r\n        <h2>Users</h2>\r\n      </Row>\r\n      <Row className=\"justify-content-center align-content-center pt-5\">\r\n        {displayUsers(usersDataStatus)}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n"]},"metadata":{},"sourceType":"module"}