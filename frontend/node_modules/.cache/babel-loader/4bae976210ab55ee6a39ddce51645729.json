{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\components\\\\users\\\\Permissions.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // redux hooks imported\n\nimport { useDispatch } from 'react-redux'; // bootstrap components imported\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // local components imported\n\nimport UserDivisions from './UserDivisions'; // setUserActions redux action imported\n\nimport { setUserActions } from '../../../redux/features/usersSlice';\n/**\r\n * Permissions component\r\n * Adds functionalily to remove the Organisational Unit from the user,\r\n * and add additional divisions permissions to the user\r\n * the component also renders UserDivisions components\r\n * @param {*} props id, orgUnit, divisions, isArrNotEmpty\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Permissions(_ref) {\n  _s();\n\n  let {\n    id,\n    orgUnit,\n    divisions,\n    isArrNotEmpty\n  } = _ref;\n\n  // randNum function returns a random number - used in key prop mapping\n  const randomNum = (min, max) => Math.random() * (max - min) + min; // dispatch is assigned the useDispatch hook\n\n\n  const dispatch = useDispatch(); // local state declared for the org remove & add division functionality\n\n  const [newDivision, setNewDivision] = useState('');\n  const [divInput, toggleDivInput] = useState(false);\n  /**\r\n   * handleDivisionToggle function\r\n   * calls the toggleDivInput function with the opposite boolean value,\r\n   * to the current as payload\r\n   */\n\n  const handleDivisionToggle = () => {\n    toggleDivInput(!divInput);\n  };\n  /**\r\n   * handleDivisionInput\r\n   * calls the setNewDivision with the input value as payload\r\n   * @param {*} e event\r\n   */\n\n\n  const handleDivisionInput = e => {\n    setNewDivision(e.target.value);\n  };\n  /**\r\n   * handleDivisionAdd function\r\n   * this function adds a division to the users permission\r\n   * token retrieved from localStorage\r\n   * payload object is assigned attributes: id (prop), orgUnit (prop), division (localState)\r\n   * try catch wraps the fetch request for error handling\r\n   * the fetch request contains the token in the header and the payload in the body\r\n   * its result is set to the response variable\r\n   * if the request is successful,\r\n   * the response is parsed and assigned to result\r\n   * the user is alerted of the success and the setUserActions action is fired\r\n   * toggleDivInput is also fired\r\n   */\n\n\n  const handleDivisionAdd = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      id,\n      orgUnit,\n      division: newDivision\n    };\n\n    try {\n      const response = await fetch('user/assign/division', {\n        method: 'PUT',\n        headers: {\n          authorization: token,\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n\n      if (result.status === 'ok') {\n        alert(result.message);\n        dispatch(setUserActions());\n        toggleDivInput(!divInput);\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * handleOrgRemove function\r\n   * this function removes the org unit from the users permissions\r\n   * token retrieved from local storage\r\n   * payload object assigned id and orgUnit props as attributes\r\n   * try catch wraps the fetch request for error handling\r\n   * header contains the token, and body the payload\r\n   * if successful the user is alerted and the setUserActions is fired\r\n   * if not the user is alerted of the error\r\n   */\n\n\n  const handleOrgRemove = async () => {\n    const token = localStorage.getItem('token');\n    const payload = {\n      id,\n      orgUnit\n    };\n\n    try {\n      const response = await fetch('user/remove/org-unit', {\n        method: 'PUT',\n        headers: {\n          authorization: token,\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n\n      if (result.status === 'ok') {\n        alert(result.message);\n        dispatch(setUserActions());\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * Bootstrap components and styling is used for layout, additionally custom css is also used\r\n   * First the Org unit is rendered with orgUnit prop text value\r\n   * a remove button is added for the Org unit, which has an onClick event that fires handleOrgRemove\r\n   * Divisions block,\r\n   * JSX conditional logic is used to initial display an add Division button,\r\n   * if clicked the an input field and submit button is displayed\r\n   * finally, JSX conditional logic is used to display the users division permissions\r\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"org-unit-container\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Organisational Unit:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: orgUnit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-6 align-items-center justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          type: \"button\",\n          onClick: handleOrgRemove,\n          children: \"remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center pb-3 divisions-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Divisions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), divInput ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newDivision,\n          onChange: handleDivisionInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted\",\n          children: \"Either one of: management, finance, development, public relations, writing, security, research, admin, proofreaders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          type: \"button\",\n          onClick: handleDivisionAdd,\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-division-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary \",\n          onClick: handleDivisionToggle,\n          children: \"add Division\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center pb-3\",\n      children: isArrNotEmpty(divisions) && divisions.map(div => /*#__PURE__*/_jsxDEV(UserDivisions, {\n        id: id,\n        division: div.division,\n        orgUnit: orgUnit\n      }, `${id}${randomNum(1, 249)}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // proptype validation\n\n\n_s(Permissions, \"fBKC/GRTlsObQB4kqx6dLqdb70o=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Permissions;\nPermissions.propTypes = {\n  id: PropTypes.string.isRequired,\n  orgUnit: PropTypes.string.isRequired,\n  divisions: PropTypes.array.isRequired,\n  isArrNotEmpty: PropTypes.func.isRequired\n};\nexport default Permissions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Permissions\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/components/users/Permissions.jsx"],"names":["React","useState","PropTypes","useDispatch","Row","Col","UserDivisions","setUserActions","Permissions","id","orgUnit","divisions","isArrNotEmpty","randomNum","min","max","Math","random","dispatch","newDivision","setNewDivision","divInput","toggleDivInput","handleDivisionToggle","handleDivisionInput","e","target","value","handleDivisionAdd","token","localStorage","getItem","payload","division","response","fetch","method","headers","authorization","body","JSON","stringify","result","json","status","alert","message","err","handleOrgRemove","map","div","propTypes","string","isRequired","array","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// redux hooks imported\r\nimport { useDispatch } from 'react-redux';\r\n// bootstrap components imported\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n// local components imported\r\nimport UserDivisions from './UserDivisions';\r\n// setUserActions redux action imported\r\nimport { setUserActions } from '../../../redux/features/usersSlice';\r\n/**\r\n * Permissions component\r\n * Adds functionalily to remove the Organisational Unit from the user,\r\n * and add additional divisions permissions to the user\r\n * the component also renders UserDivisions components\r\n * @param {*} props id, orgUnit, divisions, isArrNotEmpty\r\n */\r\nfunction Permissions({ id, orgUnit, divisions, isArrNotEmpty }) {\r\n  // randNum function returns a random number - used in key prop mapping\r\n  const randomNum = (min, max) => Math.random() * (max - min) + min;\r\n  // dispatch is assigned the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  // local state declared for the org remove & add division functionality\r\n  const [newDivision, setNewDivision] = useState('');\r\n  const [divInput, toggleDivInput] = useState(false);\r\n  /**\r\n   * handleDivisionToggle function\r\n   * calls the toggleDivInput function with the opposite boolean value,\r\n   * to the current as payload\r\n   */\r\n  const handleDivisionToggle = () => {\r\n    toggleDivInput(!divInput);\r\n  };\r\n  /**\r\n   * handleDivisionInput\r\n   * calls the setNewDivision with the input value as payload\r\n   * @param {*} e event\r\n   */\r\n  const handleDivisionInput = (e) => {\r\n    setNewDivision(e.target.value);\r\n  };\r\n  /**\r\n   * handleDivisionAdd function\r\n   * this function adds a division to the users permission\r\n   * token retrieved from localStorage\r\n   * payload object is assigned attributes: id (prop), orgUnit (prop), division (localState)\r\n   * try catch wraps the fetch request for error handling\r\n   * the fetch request contains the token in the header and the payload in the body\r\n   * its result is set to the response variable\r\n   * if the request is successful,\r\n   * the response is parsed and assigned to result\r\n   * the user is alerted of the success and the setUserActions action is fired\r\n   * toggleDivInput is also fired\r\n   */\r\n  const handleDivisionAdd = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      id,\r\n      orgUnit,\r\n      division: newDivision,\r\n    };\r\n    try {\r\n      const response = await fetch('user/assign/division', {\r\n        method: 'PUT',\r\n        headers: { authorization: token, 'Content-type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await response.json();\r\n      if (result.status === 'ok') {\r\n        alert(result.message);\r\n        dispatch(setUserActions());\r\n        toggleDivInput(!divInput);\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * handleOrgRemove function\r\n   * this function removes the org unit from the users permissions\r\n   * token retrieved from local storage\r\n   * payload object assigned id and orgUnit props as attributes\r\n   * try catch wraps the fetch request for error handling\r\n   * header contains the token, and body the payload\r\n   * if successful the user is alerted and the setUserActions is fired\r\n   * if not the user is alerted of the error\r\n   */\r\n  const handleOrgRemove = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const payload = {\r\n      id,\r\n      orgUnit,\r\n    };\r\n    try {\r\n      const response = await fetch('user/remove/org-unit', {\r\n        method: 'PUT',\r\n        headers: { authorization: token, 'Content-type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const result = await response.json();\r\n      if (result.status === 'ok') {\r\n        alert(result.message);\r\n        dispatch(setUserActions());\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * Bootstrap components and styling is used for layout, additionally custom css is also used\r\n   * First the Org unit is rendered with orgUnit prop text value\r\n   * a remove button is added for the Org unit, which has an onClick event that fires handleOrgRemove\r\n   * Divisions block,\r\n   * JSX conditional logic is used to initial display an add Division button,\r\n   * if clicked the an input field and submit button is displayed\r\n   * finally, JSX conditional logic is used to display the users division permissions\r\n   */\r\n  return (\r\n    <>\r\n      <Row className=\"org-unit-container\">\r\n        <Col className=\"col-md-6\">\r\n          <h5>Organisational Unit:</h5>\r\n          <p>{orgUnit}</p>\r\n        </Col>\r\n        <Col className=\"col-md-6 align-items-center justify-content-center\">\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            type=\"button\"\r\n            onClick={handleOrgRemove}\r\n          >\r\n            remove\r\n          </button>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center pb-3 divisions-container\">\r\n        <h5>Divisions:</h5>\r\n        {divInput ? (\r\n          <>\r\n            <input\r\n              type=\"text\"\r\n              value={newDivision}\r\n              onChange={handleDivisionInput}\r\n            />\r\n            <p className=\"text-muted\">\r\n              Either one of: management, finance, development, public relations,\r\n              writing, security, research, admin, proofreaders\r\n            </p>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              type=\"button\"\r\n              onClick={handleDivisionAdd}\r\n            >\r\n              submit\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <div className=\"add-division-button\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary \"\r\n              onClick={handleDivisionToggle}\r\n            >\r\n              add Division\r\n            </button>\r\n          </div>\r\n        )}\r\n      </Row>\r\n      <Row className=\"justify-content-center pb-3\">\r\n        {isArrNotEmpty(divisions) &&\r\n          divisions.map((div) => (\r\n            <UserDivisions\r\n              id={id}\r\n              key={`${id}${randomNum(1, 249)}`}\r\n              division={div.division}\r\n              orgUnit={orgUnit}\r\n            />\r\n          ))}\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n// proptype validation\r\nPermissions.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  orgUnit: PropTypes.string.isRequired,\r\n  divisions: PropTypes.array.isRequired,\r\n  isArrNotEmpty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Permissions;\r\n"]},"metadata":{},"sourceType":"module"}