{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\components\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // import bootstrap components\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n/**\r\n * Login component\r\n * uses bootstrap components for layout\r\n * provides a login window for the user\r\n * @returns login window for the user requiring email & password details\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const navigate = useNavigate(); // local state used for login credentials\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState(''); // handleEmail function sets the email state to the value of the input field\n\n  const handleEmail = e => {\n    setEmail(e.target.value);\n  }; // handlePassword function sets the password state to the value of the input field\n\n\n  const handlePassword = e => {\n    setPassword(e.target.value);\n  };\n  /**\r\n   * loginHandler function\r\n   * this function handles the login of the user\r\n   * assigns the params to the credentials variable\r\n   * a fetch request is wrapped in a try catch block for error handling\r\n   * the POST request is sent with a body of the credentials variable parsed to JSON.\r\n   * the result variable is assigned the response variable parsed from JSON\r\n   * if successful,\r\n   * user is alerted and the JWT token is set in localStorage\r\n   * if unsuccessful,\r\n   * the user is alerted with the error message\r\n   * @param {String} userEmail the users email\r\n   * @param {String} userPassword the users password\r\n   */\n\n\n  const loginHandler = async (userEmail, userPassword) => {\n    const credentials = {\n      email: userEmail,\n      password: userPassword\n    };\n\n    try {\n      const response = await fetch('auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const result = await response.json();\n\n      if (result.status === 'ok') {\n        alert('Login successful');\n        localStorage.setItem('token', `Bearer ${result.data}`);\n        navigate('/dashboard');\n      }\n\n      if (result.status === 'error') {\n        alert(result.message);\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n  /**\r\n   * Login component JSX return\r\n   * Bootstrap components used for layout & styling\r\n   * some custom css used on the wrapping container & Col\r\n   * Each form control has a onChange event that fires the corresponding handle function\r\n   * the 'Login' button has a onClick event that fires the loginHandler function with 'email' & 'password' as params\r\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center p-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        className: \"col-md-3 ui-form-outer\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"p-5\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Enter email\",\n              onChange: handleEmail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"Password\",\n              onChange: handlePassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"button\",\n            onClick: () => loginHandler(email, password),\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"3EppOPrTUbqGnofT+5nt0Tjfe+w=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/components/Login.jsx"],"names":["React","useState","useNavigate","Container","Row","Col","Form","Button","Login","navigate","email","setEmail","password","setPassword","handleEmail","e","target","value","handlePassword","loginHandler","userEmail","userPassword","credentials","response","fetch","method","headers","body","JSON","stringify","result","json","status","alert","localStorage","setItem","data","message","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// import bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n/**\r\n * Login component\r\n * uses bootstrap components for layout\r\n * provides a login window for the user\r\n * @returns login window for the user requiring email & password details\r\n */\r\nfunction Login() {\r\n  const navigate = useNavigate();\r\n  // local state used for login credentials\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  // handleEmail function sets the email state to the value of the input field\r\n  const handleEmail = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n  // handlePassword function sets the password state to the value of the input field\r\n  const handlePassword = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n  /**\r\n   * loginHandler function\r\n   * this function handles the login of the user\r\n   * assigns the params to the credentials variable\r\n   * a fetch request is wrapped in a try catch block for error handling\r\n   * the POST request is sent with a body of the credentials variable parsed to JSON.\r\n   * the result variable is assigned the response variable parsed from JSON\r\n   * if successful,\r\n   * user is alerted and the JWT token is set in localStorage\r\n   * if unsuccessful,\r\n   * the user is alerted with the error message\r\n   * @param {String} userEmail the users email\r\n   * @param {String} userPassword the users password\r\n   */\r\n  const loginHandler = async (userEmail, userPassword) => {\r\n    const credentials = { email: userEmail, password: userPassword };\r\n    try {\r\n      const response = await fetch('auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n      const result = await response.json();\r\n      if (result.status === 'ok') {\r\n        alert('Login successful');\r\n        localStorage.setItem('token', `Bearer ${result.data}`);\r\n        navigate('/dashboard');\r\n      }\r\n      if (result.status === 'error') {\r\n        alert(result.message);\r\n      }\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  };\r\n  /**\r\n   * Login component JSX return\r\n   * Bootstrap components used for layout & styling\r\n   * some custom css used on the wrapping container & Col\r\n   * Each form control has a onChange event that fires the corresponding handle function\r\n   * the 'Login' button has a onClick event that fires the loginHandler function with 'email' & 'password' as params\r\n   */\r\n  return (\r\n    <Container fluid className=\"login-container\">\r\n      <Row className=\"justify-content-center p-5\">\r\n        <Col className=\"col-md-3 ui-form-outer\">\r\n          <Form className=\"p-5\">\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                onChange={handleEmail}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={handlePassword}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"button\"\r\n              onClick={() => loginHandler(email, password)}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}