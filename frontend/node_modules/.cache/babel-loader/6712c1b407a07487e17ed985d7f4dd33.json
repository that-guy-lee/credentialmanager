{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // default initialState declared\n\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n  roles: {},\n  permissions: []\n};\n/**\r\n * userSlice\r\n * created for management of the user information\r\n * reducers\r\n * setDefault is used to wipe the user data from the state\r\n * All other reducers set the state to the value of the action payload,\r\n * of their corresponding action/ state names.\r\n */\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setDefault: () => initialState,\n    setName: (state, action) => {\n      state.name = action.payload;\n    },\n    setEmail: (state, action) => {\n      state.email = action.payload;\n    },\n    setPassword: (state, action) => {\n      state.password = action.payload;\n    },\n    setPermissions: (state, action) => {\n      state.permissions.push(action.payload);\n    },\n    removePermissions: (state, action) => {\n      const updatedPermissions = state.permissions.filter(perm => perm.orgUnit !== action.payload);\n      console.log(updatedPermissions);\n      state.permissions = updatedPermissions;\n    }\n  }\n}); // slice actions exported\n\nexport const {\n  setDefault,\n  setName,\n  setEmail,\n  setPassword,\n  setPermissions,\n  removePermissions\n} = userSlice.actions; // reducer exported for global state\n\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/redux/features/userSlice.js"],"names":["createSlice","initialState","name","email","password","roles","permissions","userSlice","reducers","setDefault","setName","state","action","payload","setEmail","setPassword","setPermissions","push","removePermissions","updatedPermissions","filter","perm","orgUnit","console","log","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,KAAK,EAAE,EAJY;AAKnBC,EAAAA,WAAW,EAAE;AALM,CAArB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAGP,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BD,EAAAA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,MAAMR,YADV;AAERS,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACC,OAApB;AACD,KAJO;AAKRC,IAAAA,QAAQ,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,KAPO;AAQRE,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACP,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACD,KAVO;AAWRG,IAAAA,cAAc,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACL,WAAN,CAAkBW,IAAlB,CAAuBL,MAAM,CAACC,OAA9B;AACD,KAbO;AAcRK,IAAAA,iBAAiB,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACpC,YAAMO,kBAAkB,GAAGR,KAAK,CAACL,WAAN,CAAkBc,MAAlB,CACxBC,IAAD,IAAUA,IAAI,CAACC,OAAL,KAAiBV,MAAM,CAACC,OADT,CAA3B;AAGAU,MAAAA,OAAO,CAACC,GAAR,CAAYL,kBAAZ;AACAR,MAAAA,KAAK,CAACL,WAAN,GAAoBa,kBAApB;AACD;AApBO;AAHkB,CAAD,CAA7B,C,CA0BA;;AACA,OAAO,MAAM;AACXV,EAAAA,UADW;AAEXC,EAAAA,OAFW;AAGXI,EAAAA,QAHW;AAIXC,EAAAA,WAJW;AAKXC,EAAAA,cALW;AAMXE,EAAAA;AANW,IAOTX,SAAS,CAACkB,OAPP,C,CAQP;;AACA,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n// default initialState declared\r\nconst initialState = {\r\n  name: '',\r\n  email: '',\r\n  password: '',\r\n  roles: {},\r\n  permissions: [],\r\n};\r\n/**\r\n * userSlice\r\n * created for management of the user information\r\n * reducers\r\n * setDefault is used to wipe the user data from the state\r\n * All other reducers set the state to the value of the action payload,\r\n * of their corresponding action/ state names.\r\n */\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    setDefault: () => initialState,\r\n    setName: (state, action) => {\r\n      state.name = action.payload;\r\n    },\r\n    setEmail: (state, action) => {\r\n      state.email = action.payload;\r\n    },\r\n    setPassword: (state, action) => {\r\n      state.password = action.payload;\r\n    },\r\n    setPermissions: (state, action) => {\r\n      state.permissions.push(action.payload);\r\n    },\r\n    removePermissions: (state, action) => {\r\n      const updatedPermissions = state.permissions.filter(\r\n        (perm) => perm.orgUnit !== action.payload\r\n      );\r\n      console.log(updatedPermissions);\r\n      state.permissions = updatedPermissions;\r\n    },\r\n  },\r\n});\r\n// slice actions exported\r\nexport const {\r\n  setDefault,\r\n  setName,\r\n  setEmail,\r\n  setPassword,\r\n  setPermissions,\r\n  removePermissions,\r\n} = userSlice.actions;\r\n// reducer exported for global state\r\nexport default userSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}