{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\route\\\\ProtectedRoutes.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // react redux hooks imported\n\nimport { useDispatch } from 'react-redux'; // outlet component imported\n\nimport { Outlet } from 'react-router'; // local component imported\n\nimport Homepage from '../pages/Homepage'; // redux action imported\n\nimport { setLoggedUser } from '../../redux/features/orgUnitSlice';\n/**\r\n * authenticate function\r\n * retrieves the JWT token from local storage\r\n * fetch request to the auth-check endpoint wrapped in try catch block for error handling\r\n * result of request assigned to response variable\r\n * response parsed from json and assigned to result variable\r\n * if  successful,\r\n * returns results, else returns error\r\n * @returns endpoint request result or error\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authenticate = async () => {\n  const token = localStorage.getItem('token');\n  let result;\n\n  try {\n    const response = await fetch('auth/auth-check', {\n      method: 'GET',\n      headers: {\n        authorization: `${token}`\n      }\n    });\n    result = await response.json();\n\n    if (result.status === 'ok') {\n      return result;\n    }\n\n    return result;\n  } catch (err) {\n    alert(err);\n    return err;\n  }\n};\n/**\r\n * ProtectedRoutes component\r\n * used to enforce authentication when accessing a route\r\n * @returns Outlet Component (redirects to dashboard/) or Homepage component\r\n */\n\nfunction ProtectedRoutes() {\n  _s();\n\n  // local state declared used as auth store\n  const [auth, setAuth] = useState(false); // dispatch declared as the useDispatch hook\n\n  const dispatch = useDispatch();\n  /**\r\n   * authenticate function is called\r\n   * .then is used to handle the promise\r\n   * conditional then checks if status of data ok\r\n   * indicating successful authentication,\r\n   * calls setAuth with true payload\r\n   * and dispatches the setLoggedUser actions with data as payload\r\n   * if not authenticated\r\n   * calls setAuth with false payload\r\n   */\n\n  authenticate().then(data => {\n    if (data.status === 'ok') {\n      setAuth(true);\n      dispatch(setLoggedUser(data.data));\n    }\n\n    if (data.status === 'error') {\n      setAuth(false);\n    }\n  }); // if true outlet returned, if not Homepage component returned\n\n  return auth ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 30\n  }, this);\n}\n\n_s(ProtectedRoutes, \"VDbBRoENowIobtn9axWdvqyypnU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ProtectedRoutes;\nexport default ProtectedRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoutes\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/route/ProtectedRoutes.jsx"],"names":["React","useState","useDispatch","Outlet","Homepage","setLoggedUser","authenticate","token","localStorage","getItem","result","response","fetch","method","headers","authorization","json","status","err","alert","ProtectedRoutes","auth","setAuth","dispatch","then","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AACA,SAASC,MAAT,QAAuB,cAAvB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CACA;;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,YAAY,GAAG,YAAY;AACtC,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,MAAIC,MAAJ;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,EAAoB;AAC9CC,MAAAA,MAAM,EAAE,KADsC;AAE9CC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,GAAER,KAAM;AAA1B;AAFqC,KAApB,CAA5B;AAIAG,IAAAA,MAAM,GAAG,MAAMC,QAAQ,CAACK,IAAT,EAAf;;AACA,QAAIN,MAAM,CAACO,MAAP,KAAkB,IAAtB,EAA4B;AAC1B,aAAOP,MAAP;AACD;;AACD,WAAOA,MAAP;AACD,GAVD,CAUE,OAAOQ,GAAP,EAAY;AACZC,IAAAA,KAAK,CAACD,GAAD,CAAL;AACA,WAAOA,GAAP;AACD;AACF,CAjBM;AAkBP;AACA;AACA;AACA;AACA;;AACA,SAASE,eAAT,GAA2B;AAAA;;AACzB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,KAAD,CAAhC,CAFyB,CAGzB;;AACA,QAAMsB,QAAQ,GAAGrB,WAAW,EAA5B;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACEI,EAAAA,YAAY,GAAGkB,IAAf,CAAqBC,IAAD,IAAU;AAC5B,QAAIA,IAAI,CAACR,MAAL,KAAgB,IAApB,EAA0B;AACxBK,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,MAAAA,QAAQ,CAAClB,aAAa,CAACoB,IAAI,CAACA,IAAN,CAAd,CAAR;AACD;;AACD,QAAIA,IAAI,CAACR,MAAL,KAAgB,OAApB,EAA6B;AAC3BK,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GARD,EAfyB,CAwBzB;;AACA,SAAOD,IAAI,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBAAgB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAA3B;AACD;;GA1BQD,e;UAIUlB,W;;;KAJVkB,e;AA4BT,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react';\r\n// react redux hooks imported\r\nimport { useDispatch } from 'react-redux';\r\n// outlet component imported\r\nimport { Outlet } from 'react-router';\r\n// local component imported\r\nimport Homepage from '../pages/Homepage';\r\n// redux action imported\r\nimport { setLoggedUser } from '../../redux/features/orgUnitSlice';\r\n/**\r\n * authenticate function\r\n * retrieves the JWT token from local storage\r\n * fetch request to the auth-check endpoint wrapped in try catch block for error handling\r\n * result of request assigned to response variable\r\n * response parsed from json and assigned to result variable\r\n * if  successful,\r\n * returns results, else returns error\r\n * @returns endpoint request result or error\r\n */\r\nexport const authenticate = async () => {\r\n  const token = localStorage.getItem('token');\r\n  let result;\r\n  try {\r\n    const response = await fetch('auth/auth-check', {\r\n      method: 'GET',\r\n      headers: { authorization: `${token}` },\r\n    });\r\n    result = await response.json();\r\n    if (result.status === 'ok') {\r\n      return result;\r\n    }\r\n    return result;\r\n  } catch (err) {\r\n    alert(err);\r\n    return err;\r\n  }\r\n};\r\n/**\r\n * ProtectedRoutes component\r\n * used to enforce authentication when accessing a route\r\n * @returns Outlet Component (redirects to dashboard/) or Homepage component\r\n */\r\nfunction ProtectedRoutes() {\r\n  // local state declared used as auth store\r\n  const [auth, setAuth] = useState(false);\r\n  // dispatch declared as the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * authenticate function is called\r\n   * .then is used to handle the promise\r\n   * conditional then checks if status of data ok\r\n   * indicating successful authentication,\r\n   * calls setAuth with true payload\r\n   * and dispatches the setLoggedUser actions with data as payload\r\n   * if not authenticated\r\n   * calls setAuth with false payload\r\n   */\r\n  authenticate().then((data) => {\r\n    if (data.status === 'ok') {\r\n      setAuth(true);\r\n      dispatch(setLoggedUser(data.data));\r\n    }\r\n    if (data.status === 'error') {\r\n      setAuth(false);\r\n    }\r\n  });\r\n  // if true outlet returned, if not Homepage component returned\r\n  return auth ? <Outlet /> : <Homepage />;\r\n}\r\n\r\nexport default ProtectedRoutes;\r\n"]},"metadata":{},"sourceType":"module"}