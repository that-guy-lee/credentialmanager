{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leeak\\\\Desktop\\\\blah\\\\credentials-manager\\\\frontend\\\\src\\\\components\\\\pages\\\\Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // bootstrap components\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner'; // application components\n\nimport DashboardHeader from '../components/DashboardHeader';\nimport Credentials from '../components/Credentials';\nimport Controls from '../components/Controls';\nimport AddCredential from '../components/AddCredential';\nimport Users from '../components/users/Users'; // redux actions\n\nimport { getOrgData } from '../../redux/features/orgUnitSlice'; // form ui styles\n\nimport '../../resources/css/formUI.css'; // credentials styles\n\nimport '../../resources/css/credentials.css'; // usersUI styles\n\nimport '../../resources/css/usersUI.css';\n/**\r\n * Dashboard component\r\n * renders a dashboard for the user to interact with org data\r\n * @returns dashboard dependent components depending on user interaction and application state\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  // dispatch variable assigned the useDispatch hook\n  const dispatch = useDispatch(); // action state sync with the useSelector hook\n\n  const actionsStatus = useSelector(state => state.orgData.actions);\n  const dataStatus = useSelector(state => state.orgData.status);\n  const addFormStatus = useSelector(state => state.dashboard.addComponent);\n  const viewUsers = useSelector(state => state.dashboard.viewUsers);\n  /**\r\n   * useEffect used to call the getOrgData on first render,\r\n   * and when there is a change in the actions state\r\n   */\n\n  useEffect(() => {\n    dispatch(getOrgData());\n  }, [actionsStatus]); // orgData is assigned the value of the orgUnits state\n\n  const orgData = useSelector(state => state.orgData.orgUnits);\n  /**\r\n   * Dashboard display\r\n   * bootstrap components & styles are used for layout\r\n   * nested JSX conditionals is used to display different components,\r\n   * depending on user interaction\r\n   * DashboardHeader component is displayed regardless of user interaction\r\n   * if user has selected to view the users\r\n   * the users component is rendered\r\n   * if not,\r\n   * conditional checks if the user has selected to add a credential\r\n   * if so,\r\n   * AddCredential component is render with the Controls component\r\n   * if not,\r\n   * Credentials component is render with the controls component\r\n   * a conditional is used to either load the Credentials or display a spinner,\r\n   * as the data is fetched.\r\n   */\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"border-bottom\",\n      children: /*#__PURE__*/_jsxDEV(DashboardHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), viewUsers ? /*#__PURE__*/_jsxDEV(Users, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Row, {\n      className: \"pt-5\",\n      children: addFormStatus ? /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(AddCredential, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-4 border\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Controls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-8 border\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Credentials\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), dataStatus === 'success' ? /*#__PURE__*/_jsxDEV(Credentials, {\n            orgData: orgData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"visually-hidden\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"col-md-4 border\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Controls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"L3jY622BrKvcryz+Yz+M5UDUuVc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/leeak/Desktop/blah/credentials-manager/frontend/src/components/pages/Dashboard.jsx"],"names":["React","useEffect","useDispatch","useSelector","Container","Row","Col","Spinner","DashboardHeader","Credentials","Controls","AddCredential","Users","getOrgData","Dashboard","dispatch","actionsStatus","state","orgData","actions","dataStatus","status","addFormStatus","dashboard","addComponent","viewUsers","orgUnits"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n// application components\r\nimport DashboardHeader from '../components/DashboardHeader';\r\nimport Credentials from '../components/Credentials';\r\nimport Controls from '../components/Controls';\r\nimport AddCredential from '../components/AddCredential';\r\nimport Users from '../components/users/Users';\r\n// redux actions\r\nimport { getOrgData } from '../../redux/features/orgUnitSlice';\r\n// form ui styles\r\nimport '../../resources/css/formUI.css';\r\n// credentials styles\r\nimport '../../resources/css/credentials.css';\r\n// usersUI styles\r\nimport '../../resources/css/usersUI.css';\r\n/**\r\n * Dashboard component\r\n * renders a dashboard for the user to interact with org data\r\n * @returns dashboard dependent components depending on user interaction and application state\r\n */\r\nfunction Dashboard() {\r\n  // dispatch variable assigned the useDispatch hook\r\n  const dispatch = useDispatch();\r\n  // action state sync with the useSelector hook\r\n  const actionsStatus = useSelector((state) => state.orgData.actions);\r\n  const dataStatus = useSelector((state) => state.orgData.status);\r\n  const addFormStatus = useSelector((state) => state.dashboard.addComponent);\r\n  const viewUsers = useSelector((state) => state.dashboard.viewUsers);\r\n  /**\r\n   * useEffect used to call the getOrgData on first render,\r\n   * and when there is a change in the actions state\r\n   */\r\n  useEffect(() => {\r\n    dispatch(getOrgData());\r\n  }, [actionsStatus]);\r\n  // orgData is assigned the value of the orgUnits state\r\n  const orgData = useSelector((state) => state.orgData.orgUnits);\r\n  /**\r\n   * Dashboard display\r\n   * bootstrap components & styles are used for layout\r\n   * nested JSX conditionals is used to display different components,\r\n   * depending on user interaction\r\n   * DashboardHeader component is displayed regardless of user interaction\r\n   * if user has selected to view the users\r\n   * the users component is rendered\r\n   * if not,\r\n   * conditional checks if the user has selected to add a credential\r\n   * if so,\r\n   * AddCredential component is render with the Controls component\r\n   * if not,\r\n   * Credentials component is render with the controls component\r\n   * a conditional is used to either load the Credentials or display a spinner,\r\n   * as the data is fetched.\r\n   */\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"border-bottom\">\r\n        <DashboardHeader />\r\n      </Row>\r\n      {viewUsers ? (\r\n        <Users />\r\n      ) : (\r\n        <Row className=\"pt-5\">\r\n          {addFormStatus ? (\r\n            <Row>\r\n              <AddCredential />\r\n              <Col className=\"col-md-4 border\">\r\n                <h3>Controls</h3>\r\n                <Controls />\r\n              </Col>\r\n            </Row>\r\n          ) : (\r\n            <>\r\n              <Col className=\"col-md-8 border\">\r\n                <h3>Credentials</h3>\r\n                {dataStatus === 'success' ? (\r\n                  <Credentials orgData={orgData} />\r\n                ) : (\r\n                  <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                  </Spinner>\r\n                )}\r\n              </Col>\r\n              <Col className=\"col-md-4 border\">\r\n                <h3>Controls</h3>\r\n                <Controls />\r\n              </Col>\r\n            </>\r\n          )}\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}